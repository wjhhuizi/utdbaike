@model IEnumerable<ccbs.Models.NewStudentViewModel>
@{
    ViewBag.Title = "New Student Help List";
}
<div id="content-no-sidebar">
    <div>
        <h2>
            New Student Help List</h2>
        @{Html.Telerik().Grid<ccbs.Models.NewStudentViewModel>()
        .Name("NewstudentGrid")
        .DataKeys(keys =>
            {
                keys.Add(s => s.Id);
            })
        .ToolBar(commands =>
            {
                commands.Custom()
                    .Text("Export All to Excel")
                    .Action("ExportExcelAllOfferHelp", "NewStudent");
                commands.Custom()
                    .Text("Export Confirmed to Excel")
                    .Action("ExportExcelMarked", "NewStudent");
                commands.Custom()
                    .Text("Export UnConfirmed to Excel")
                    .Action("ExportExcelUnmarked", "NewStudent");
            })
        .Columns(columns =>
        {
            columns.Bound(s => s.Id)
                   .ClientTemplate("<input type='checkbox' name='checkedRecords' value='<#= Id #>' />")
                   .Title("")
                   .Width(80)
                   .HtmlAttributes(new { style = "text-align:center" })
                   .Aggregate(aggregates => aggregates.Count())
                   .ClientFooterTemplate("Total: <#= Count #>")
                   .ClientGroupFooterTemplate("Count: <#= Count #>");
            columns.Bound(s => s.Name).Width(100);
            columns.Bound(s => s.Gender).Width(80);
            columns.Bound(s => s.Email).Width(200);
            columns.Bound(s => s.HasApt).Width(100);
            columns.Bound(s => s.WhenApt).Width(100);
            columns.Bound(s => s.WhereApt).Width(100);
            columns.Bound(s => s.WillingToHelp);
            columns.Bound(s => s.HelpNote).Width(150);
            columns.Bound(s => s.Marked).Width(100).Title("Marked");
        })
        .DataBinding(dataBinding =>
            {
                dataBinding.Ajax().Select("_NewStudentHelpList", "NewStudent");
            })
        .Pageable(paging => paging.Enabled(false))
        .Scrollable(c => c.Height("500px"))
        .Sortable()
        .Filterable()
        .Groupable(grouping => grouping.Enabled(true))
        .Render();}
    </div>
    <div style="padding-top: 20px;">
        <div style="float: left; padding-right: 20px;">
            <button class="t-button t-state-default" onclick="displaySelectedRecords()" style="height: 40px;">
                Mark selected records As Confirmed
            </button>
        </div>
        <div>
            <button class="t-button t-state-default" onclick="UnMarkSelectedRecords()" style="height: 40px;">
                UnMark selected records
            </button>
        </div>
        <script type="text/javascript">
            function displaySelectedRecords() {
                var $checkedRecords = $(':checked');
                if ($checkedRecords.length < 1) {
                    alert('Please select a few students first.');
                    return;
                }
                $('#result').load('/NewStudent/MarkNewStudents', $checkedRecords, function () {
                    $(".t-grid .t-refresh").trigger('click');
                });
            }
            function UnMarkSelectedRecords() {
                var $checkedRecords = $(':checked');
                if ($checkedRecords.length < 1) {
                    alert('Please select a few students first.');
                    return;
                }
                $('#result').load('/NewStudent/UnMarkNewStudents', $checkedRecords, function () {
                    $(".t-grid .t-refresh").trigger('click');
                });
            }
        </script>
    </div>
    <div id="result">
    </div>
    <br class="clearfix" />
</div>
