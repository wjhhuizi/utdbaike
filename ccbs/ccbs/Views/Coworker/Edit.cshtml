@model ccbs.Models.Coworker
@{
    ViewBag.Title = "Edit My Profile";
}
<div id="content">
    <script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
    <div>
        @Html.ActionLink("返回", "Index")
    </div>
    @using (Html.BeginForm())
    {
        @Html.ValidationSummary(true)
        <fieldset>
            <legend>@Model.Name</legend>
            @Html.HiddenFor(model => model.Id)
            @Html.HiddenFor(model => model.SelfPhoto)
            @Html.HiddenFor(model => model.BaptisePhoto)
            @Html.HiddenFor(model=>model.Username)
            <div class="editor-label">
                @Html.LabelFor(model => model.SelfPhoto, "头像")
            </div>
            <div class="editor-field">
                @(Html.Telerik().Upload()
                            .Name("SelfPhotos")
                            .Multiple((bool)false)
                            .Async(async => async
                        .Save("UploadSelfPhoto", "Coworker", new { coworkerId = Model.Id })
                            .AutoUpload((bool)true)
                            ))
            </div>
            <div class="editor-label">
                @Html.LabelFor(model => model.Name, "姓名")
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.Name)
                @Html.ValidationMessageFor(model => model.Name)
            </div>
            <div class="editor-label">
                @Html.LabelFor(model => model.Gender, "性别")
            </div>
            <div class="editor-field">
                @Html.DropDownListFor(model => model.Gender, new[]
                {
                   new SelectListItem{Value=ccbs.Models.Gender.singleFemale.ToString(), Text="Female"},
                   new SelectListItem{Value=ccbs.Models.Gender.singleMale.ToString(), Text="Male"}
                })
                @Html.ValidationMessageFor(model => model.Gender)
            </div>
            <div class="editor-label">
                @Html.LabelFor(model => model.Email, "邮箱")
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.Email)
                @Html.ValidationMessageFor(model => model.Email)
            </div>
            <div class="editor-label">
                @Html.LabelFor(model => model.Phone, "手机")
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.Phone)
                @Html.ValidationMessageFor(model => model.Phone)
            </div>
            <div class="editor-label">
                @Html.LabelFor(model => model.SelfIntro, "自我简介")
            </div>
            <div class="editor-field">
                @Html.TextAreaFor(model => model.SelfIntro, new { @class = "text-area-edit" })
                @Html.ValidationMessageFor(model => model.SelfIntro)
            </div>
            <div class="editor-label">
                @Html.LabelFor(model => model.BaptisePhoto, "受洗照")
            </div>
            <div class="editor-field">
                @(Html.Telerik().Upload()
                            .Name("BaptisePhotos")
                            .Multiple((bool)false)
                            .Async(async => async
                            .Save("UploadBaptisePhoto", "Coworker", new { coworkerId = Model.Id })
                            .AutoUpload((bool)true)
                            ))
            </div>
            <div class="editor-label">
                @Html.LabelFor(model => model.Testimony, "见证分享")
            </div>
            <div class="editor-field">
                @Html.TextAreaFor(model => model.Testimony, new { @class = "text-area-edit" })
                @Html.ValidationMessageFor(model => model.Testimony)
            </div>
            <div class="editor-label">
                @Html.LabelFor(model => model.MindRenew, "心意更新")
            </div>
            <div class="editor-field">
                @Html.TextAreaFor(model => model.MindRenew, new { @class = "text-area-edit" })
                @Html.ValidationMessageFor(model => model.MindRenew)
            </div>
            <div class="editor-label">
                @Html.LabelFor(model => model.Service, "团契服侍")
            </div>
            <div class="editor-field">
                @Html.TextAreaFor(model => model.Service, new { @class = "text-area-edit" })
                @Html.ValidationMessageFor(model => model.Service)
            </div>
            <div class="editor-label">
                @Html.LabelFor(model => model.BeginDate, "服侍起始日期")
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.BeginDate)
                @Html.ValidationMessageFor(model => model.BeginDate)
            </div>
            <div class="editor-label">
                @Html.LabelFor(model => model.LeaveDate, "离开团契日期(若仍在团契就留空白)")
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.LeaveDate)
                @Html.ValidationMessageFor(model => model.LeaveDate)
            </div>
            <p>
                <input type="submit" value="Save" />
            </p>
        </fieldset>
    }
    <div>
        @Html.ActionLink("返回", "Index")
    </div>
    <br class="clearfix" />
</div>
<div>
    @{Html.RenderPartial("_Sidebar");}
</div>
